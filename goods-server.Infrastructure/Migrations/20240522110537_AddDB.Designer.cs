// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using goods_server.Infrastructure;

#nullable disable

namespace goods_server.Infrastructure.Migrations
{
    [DbContext(typeof(GoodsExchangeApplication2024DbContext))]
    [Migration("20240522110537_AddDB")]
    partial class AddDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("goods_server.Core.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DenyRes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("goods_server.Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("goods_server.Core.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("goods_server.Core.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("CommenterId")
                        .HasColumnType("int");

                    b.Property<string>("Descript")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommenterId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("goods_server.Core.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId")
                        .HasName("PK_Type");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("goods_server.Core.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("goods_server.Core.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("goods_server.Core.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("DenyRes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IsDisplay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("is_Display");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Rated")
                        .HasColumnType("int");

                    b.Property<int?>("RatedCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("GenreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("goods_server.Core.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Descript")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("goods_server.Core.Models.ReplyComment", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("CommenterId")
                        .HasColumnType("int");

                    b.Property<string>("Descript")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommenterId");

                    b.ToTable("ReplyComments");
                });

            modelBuilder.Entity("goods_server.Core.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Descript")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReportId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("goods_server.Core.Models.RequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductBuyerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSellerId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductBuyerId");

                    b.HasIndex("ProductSellerId");

                    b.HasIndex("SellerId");

                    b.ToTable("RequestHistory", (string)null);
                });

            modelBuilder.Entity("goods_server.Core.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("goods_server.Core.Models.Account", b =>
                {
                    b.HasOne("goods_server.Core.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Accounts_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("goods_server.Core.Models.Comment", b =>
                {
                    b.HasOne("goods_server.Core.Models.Account", "Commenter")
                        .WithMany("Comments")
                        .HasForeignKey("CommenterId")
                        .HasConstraintName("FK_Comments_Accounts");

                    b.HasOne("goods_server.Core.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comments_Products");

                    b.Navigation("Commenter");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("goods_server.Core.Models.Order", b =>
                {
                    b.HasOne("goods_server.Core.Models.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Accounts");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("goods_server.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("goods_server.Core.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Orders");

                    b.HasOne("goods_server.Core.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("goods_server.Core.Models.Product", b =>
                {
                    b.HasOne("goods_server.Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Category");

                    b.HasOne("goods_server.Core.Models.City", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Products_City");

                    b.HasOne("goods_server.Core.Models.Genre", "Genre")
                        .WithMany("Products")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_Products_Type");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("goods_server.Core.Models.Rating", b =>
                {
                    b.HasOne("goods_server.Core.Models.Account", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Rating_Accounts");

                    b.HasOne("goods_server.Core.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Rating_Products");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("goods_server.Core.Models.ReplyComment", b =>
                {
                    b.HasOne("goods_server.Core.Models.Comment", "Comment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_ReplyComments_Comments");

                    b.HasOne("goods_server.Core.Models.Account", "Commenter")
                        .WithMany("ReplyComments")
                        .HasForeignKey("CommenterId")
                        .HasConstraintName("FK_ReplyComments_Accounts");

                    b.Navigation("Comment");

                    b.Navigation("Commenter");
                });

            modelBuilder.Entity("goods_server.Core.Models.Report", b =>
                {
                    b.HasOne("goods_server.Core.Models.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Reports_Accounts");

                    b.HasOne("goods_server.Core.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Reports_Products");

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("goods_server.Core.Models.RequestHistory", b =>
                {
                    b.HasOne("goods_server.Core.Models.Account", "Buyer")
                        .WithMany("RequestHistoryBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK_RequestHistory_Accounts");

                    b.HasOne("goods_server.Core.Models.Product", "ProductBuyer")
                        .WithMany("RequestHistoryProductBuyers")
                        .HasForeignKey("ProductBuyerId")
                        .HasConstraintName("FK_RequestHistory_Products1");

                    b.HasOne("goods_server.Core.Models.Product", "ProductSeller")
                        .WithMany("RequestHistoryProductSellers")
                        .HasForeignKey("ProductSellerId")
                        .HasConstraintName("FK_RequestHistory_Products");

                    b.HasOne("goods_server.Core.Models.Account", "Seller")
                        .WithMany("RequestHistorySellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_RequestHistory_Accounts1");

                    b.Navigation("Buyer");

                    b.Navigation("ProductBuyer");

                    b.Navigation("ProductSeller");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("goods_server.Core.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("ReplyComments");

                    b.Navigation("Reports");

                    b.Navigation("RequestHistoryBuyers");

                    b.Navigation("RequestHistorySellers");
                });

            modelBuilder.Entity("goods_server.Core.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("goods_server.Core.Models.City", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("goods_server.Core.Models.Comment", b =>
                {
                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("goods_server.Core.Models.Genre", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("goods_server.Core.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("goods_server.Core.Models.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("RequestHistoryProductBuyers");

                    b.Navigation("RequestHistoryProductSellers");
                });

            modelBuilder.Entity("goods_server.Core.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
